openapi: 3.0.0
info:
  title: GoRest API
  description: OpenAPI Specification for GoRest CRUD operations.
  version: 1.0.0
servers:
  - url: https://gorest.co.in/public/v2
    description: Production API Server
  - url: http://qa-test-enviornment
    description: Develop API Server
paths:
  /users:
    post:
      summary: Create a new user
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
        '429':
          description: Too many requests
    get:
      summary: Get all users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
        '429':
          description: Too many requests
  /users/{id}:
    get:
      summary: Get user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found
    put:
      summary: Update user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input
        '404':
          description: User not found
    delete:
      summary: Delete user by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: User ID
      responses:
        '204':
          description: User deleted successfully
        '404':
          description: User not found
        '500':
          description: Server error
components:
  # securitySchemes:
  #   BearerAuth:
  #     type: http
  #     scheme: bearer
  #     bearerFormat: JWT
  schemas:
    UserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        gender:
          type: string
          enum: [male, female]
        status:
          type: string
          enum: [active, inactive]
      required:
        - name
        - email
        - gender
        - status
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: '123'
        name:
          type: string
        email:
          type: string
          format: email
        gender:
          type: string
        status:
          type: string
security:
  - BearerAuth: []
